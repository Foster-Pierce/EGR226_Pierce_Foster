#include "msp.h"


/**
 * main.c
 */
void main(void)
{
	WDT_A->CTL = WDT_A_CTL_PW | WDT_A_CTL_HOLD;		// stop watchdog timer
	    //Configure GPIO

	P1SEL1 &= ~BIT1; // configure P1.1 as simple I/O
    P1SEL0 &= ~BIT1;
	P1DIR &= ~BIT1;
	P1REN |= BIT1;
	P1OUT |= BIT1;

	P2SEL1 &= ~BIT0; // configure P2.0 as simple I/O
	P2SEL0 &= ~BIT0;
	P2DIR |= BIT0;
	P1REN &= ~BIT0;
	P1OUT &= ~BIT0;

	P2SEL1 &= ~BIT1; // configure P2.1 as simple I/O
	P2SEL0 &= ~BIT1;
	P2DIR |= BIT1;
	P2REN &= ~BIT1;
	P2OUT &= ~BIT1;

	P2SEL1 &= ~BIT2; // configure P2.2 as simple I/O
	P2SEL0 &= ~BIT2;
	P2DIR |= BIT2;
	P2REN &= ~BIT2;
	P2OUT &= ~BIT2;

while(1){
if(DebounceSwitch1()){
P2OUT ^= BIT0;
if((P2OUT & BIT2)==1)
P2OUT ^= BIT2;

while(DebounceSwitch1()){
__delay_cycles(30000);
}
}

if(DebounceSwitch1()){
    if((P2OUT & BIT0)==1){
    P2OUT ^= BIT0;
    }
    P2OUT ^= BIT1;

while(DebounceSwitch1()){
__delay_cycles(300000);
}
}
/*
if(DebounceSwitch1()){
P2OUT ^= BIT2;
if((P2OUT & BIT1)==1)
P2OUT ^= BIT1;

while(DebounceSwitch1()){
__delay_cycles(300000);
}
}
*/
/*
	    if(DebounceSwitch1()){
	    P2OUT ^= BIT0;
	    P2OUT ^= BIT1;
	    }
	    if(DebounceSwitch2())
	    __delay_cycles(750000);

	    if(DebounceSwitch1()){
//	    if(DebounceSwitch2()){
	    P2OUT ^= BIT2;
	    P2OUT ^= BIT1;
	    }
	    __delay_cycles(750000);
*/
	    }
}

int DebounceSwitch1(void)
{
int pin_Value = 0; //initialize variable as low
if ((P1IN & BIT1) == 0x00) //check of button pushed
{
__delay_cycles(30000); //pause for 10 m-sec for switch bounce
if ((P1IN & BIT1) == 0x00) //check of button is still pushed
pin_Value = 1;
}
return pin_Value; //return 1 if pushed- 0 if not pushed
}

int DebounceSwitch2(void)
{
int pin_Value = 1; //initialize variable as low
if ((P1IN & BIT1) == 0x01) //check of button not pushed
{
__delay_cycles(30000); //pause for 10 m-sec for switch bounce
if ((P1IN & BIT1) == 0x01) //check of button is still not pushed
pin_Value = 0;
}
return pin_Value; //return 1 if pushed- 0 if not pushed
}
/*
void debouncePress(void){
    if((P1->IN & BIT1)==0){
    __delay_cycles(45000);
    if((P1->IN & BIT1) ==0){
    __delay_cycles(45000);
    return 1;
    }
    }
return 0;
}


void debounceRelease(void){
    if((P1->IN & BIT1)==1){
    __delay_cycles(45000);
    if((P1->IN & BIT1) ==1){
    __delay_cycles(45000);
    return 1;
    }
    }
return 0;
}

*/

